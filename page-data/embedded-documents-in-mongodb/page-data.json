{"componentChunkName":"component---src-templates-post-jsx","path":"/embedded-documents-in-mongodb","result":{"data":{"orgContent":{"metadata":{"title":"Embedded Documents in Mongodb","date":"February 23rd, 2020","tags":["mongo","js"]},"html":"<div class=\"section\"><p>I have done many attempts to wrap my head around <a href=\"https://www.mongodb.com/\">MongoDB</a>. As I come from the traditional world of RDBMSs, this does not come naturally to me. But the more I work with Javascript, the more natural the step to Mongo becomes.</p><p>So far, my attempts to use Mongo failed, due to my inability to overcome the learning curve. In this post I will discuss one of my the biggest hurdles: embedded documents and many-to-many-relationships.</p><p>In the relational world I hardly ever work in the database directly. I almost always use an ORM like <a href=\"https://www.sqlalchemy.org/\">SQLAlchemy</a>, <a href=\"https://sequelize.org/\">Sequelize</a>, or <a href=\"https://laravel.com/docs/master/eloquent\">Eloquent</a>. In the past I worked on projects with <a href=\"https://www.meteor.com/\">Meteor</a> which uses Mongo as a backend and uses <a href=\"https://guide.meteor.com/collections.html#schemas\">schemas</a> to help manage your data. <a href=\"https://mongoosejs.com/\">Mongoose</a> provides similar functionality, which I like.</p><p>Documents in MongoDB are hierarchical by nature. They easily map to JSON and Javascript objects, which makes the match with Javascript so elegant. This means that 1:n relations are modeled by having nested documents.</p><p>For example, in my current project organisations have teams, which in turn have members. The organisations data would look like:</p><pre><code class=\"language-javascript\">  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Universal Exports\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">teams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">members</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"marketing\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">members</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ACME\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">teams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"design\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">members</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">members</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span></code></pre><p>Team members are the system's users. Each team has multiple members and every user can be member of multiple teams. This results in a many-to-many-relationship, which can no longer be modeled hierarchically. Instead of containing the user data itself, the members refer to the ids of the users and the users are in their own collection.</p><p>Similarly, I could have chosen to make teams a separate collection and have the <code>teams</code> field of the organisation refer to the team ids. But in that case, a embedded document is more natural as each team belongs to exactly one organisation. Making organisations and teams separate collections would have been the relational way, and then I should have stayed with Sequelize and Postgres.</p><p>I run into the limitations of my Mongo knowledge as I attempt to find the teams a user belongs to. I tried some queries in the Mongo client:</p><pre><code class=\"language-js\">db<span class=\"token punctuation\">.</span>organisations<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">teams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">members</span><span class=\"token operator\">:</span> <span class=\"token function\">ObjectId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5e5146d2b941b21ccea02c48\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// no response</span>\n\ndb<span class=\"token punctuation\">.</span>organisations<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"teams.members\"</span><span class=\"token operator\">:</span> <span class=\"token function\">ObjectId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5e5146d2b941b21ccea02c48\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// gives the correct organisation, but includes all teams</span></code></pre><p>So far, I haven't been able to figure out how to get the relavant teams only. So, I end up writing Javascript code instead of Mongo queries. Hopefully, I will be able to follow-up on this post soon with a solution.</p></div>"}},"pageContext":{"slug":"/embedded-documents-in-mongodb","previous":{"fields":{"slug":"/emacs-is-it-worth-it"},"metadata":{"title":"Emacs: Is it worth it?","date":"February 20th, 2020","tags":["emacs","org","productivity"]}},"next":{"fields":{"slug":"/different-perspectives"},"metadata":{"title":"Different perspectives","date":"February 25th, 2020","tags":["society","books"]}}}},"staticQueryHashes":["1056462243"]}